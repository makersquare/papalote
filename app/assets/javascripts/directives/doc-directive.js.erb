// This directive is used for doc-view.html
app.directive('docDirective', ['Doc', '$route', '$timeout', function(Doc, $route, $timeout) {
  return {
    templateUrl: "<%= asset_path('assets/templates/doc-textarea.html') %>",
    scope: false,
    // link contains all the functions that manipulate the DOM
    link: function(scope, element, attrs) {
      var dispatcher = new WebSocketRails(window.location.host+'/websocket');
      var channel = dispatcher.subscribe($route.current.params.id);
      element.bind("keyup", function(event) {
        scope.doc.content = editor.getValue();
        channel.trigger('change_doc',scope.doc);
      });

      // Theme selector (theme files found in 'src-min/')
      scope.changeTheme = function() {
        editor.setTheme("ace/theme/" + scope.theme);
      };

      // creates editor view based upon passed in mode (e.g. ruby, javascript, etc.)
      var loadFile = function(data) {
        editor = ace.edit("editor");
        editor.setTheme("ace/theme/twilight");
        editor.getSession().setTabSize(2);
        if (data !== undefined) {
          setMode(data);
        }
      };

      // sets programming language based on file extension
      var setMode = function(data) {
        if (data.name.slice(data.name.indexOf('.')+1) === 'js') {
          editor.getSession().setMode("ace/mode/javascript");
        } else if (data.name.slice(data.name.indexOf('.')+1) === 'rb') {
          editor.getSession().setMode("ace/mode/ruby");
        }
      };

      // if existing doc: pulls contents from database and pushes into editor
      // if new doc: make palceholder get request to get callback and load blank editor
      if ($route.current.params.id) {
        scope.doc = Doc.get({id: $route.current.params.id}, function(data) {
          loadFile(data);
          editor.setValue(data.content);
          editor.clearSelection();
        });
      } else {
        scope.doc = new Doc();
        loadFile();
        editor.setValue("");
      }

      // on navigation to another document, close the WebSocket channel
      scope.$on('$routeChangeStart', function(a, b) {
        document.getElementById("editor").remove();
        dispatcher.trigger("client_disconnected",$route.current.params.id);
      });

      // sets WebSocket listener to view changes made by another user on same document
      channel.bind('change_doc',function(data) {
        var cursor = editor.getCursorPosition();
        editor.session.doc.setValue(data.content);
        editor.selection.moveCursorTo(cursor.row, cursor.column);
        editor.clearSelection();
        scope.doc.content = data.content;
      });
    }
  };
}]);
